CREATE DATABASE CROWDFUNDING;
use crowdfunding;
select * from projects limit 10;
ALTER TABLE PROJECTS ADD CREATED_TIME DATE; 
SET SQL_SAFE_UPDATES=0;
UPDATE PROJECTS SET CREATED_TIME=from_unixtime(CREATED_AT);
ALTER TABLE PROJECTS MODIFY COLUMN CREATED_TIME DATETIME;
ALTER TABLE PROJECTS ADD DEADLINE_TIME DATETIME;
UPDATE PROJECTS SET DEADLINE_TIME=from_unixtime(DEADLINE);
ALTER TABLE PROJECTS ADD UPDATED_TIME DATETIME;
UPDATE PROJECTS SET UPDATED_TIME=from_unixtime(UPDATED_AT);
ALTER TABLE PROJECTS ADD STATE_CHANGED_TIME DATETIME;
UPDATE PROJECTS SET STATE_CHANGED_TIME=from_unixtime(STATE_CHANGED_AT);
ALTER TABLE PROJECTS ADD SUCCESFUL_TIME DATETIME;
UPDATE PROJECTS SET SUCCESFUL_TIME=from_unixtime(successful_at);
UPDATE projects
SET successful_at = NULL
WHERE successful_at = 0 OR successful_at NOT REGEXP '^[0-9]+$';
ALTER TABLE PROJECTS ADD LAUNCH_TIME DATETIME;
UPDATE projects SET LAUNCH_TIME=from_unixtime(LAUNCHED_aT) limit 1000;
ALTER TABLE PROJECTS ADD STATIC_AMOUNT INT;
UPDATE PROJECTS SET STATIC_AMOUNT=GOAL*STATIC_USD_RATE;
ALTER TABLE PROJECTS ADD PROJECT_DURATION INT;
UPDATE projects SET PROJECT_DURATION=abs(SUCCESFUL_TIME-CREATED_TIME) LIMIT 1000;
ALTER TABLE PROJECTS ADD COLUMN success_flag INT DEFAULT 0;
SET SQL_SAFE_UPDATES=0;
UPDATE PROJECTS SET SUCCESS_FLAG=CASE WHEN STATE="SUCCESSFUL"THEN 1 ELSE 0 END;

ALTER TABLE projects
ADD COLUMN GOAL_range VARCHAR(20);

UPDATE projects
SET GOAL_range = CASE
    WHEN STATIC_AMOUNT < 50000 THEN '< 50K'
    WHEN STATIC_AMOUNT >= 50000 AND STATIC_AMOUNT < 500000 THEN '50K - 500K'
    WHEN STATIC_AMOUNT >= 500000 AND STATIC_AMOUNT < 1000000 THEN '500K - 1M'
    ELSE '> 1M'
END;

START TRANSACTION;
SET SQL_SAFE_UPDATES=0;
UPDATE projects
SET GOAL_range = CASE
    WHEN STATIC_AMOUNT < 50000 THEN '< 50K'
    WHEN STATIC_AMOUNT >= 50000 AND STATIC_AMOUNT < 500000 THEN '50K - 500K'
    WHEN STATIC_AMOUNT >= 500000 AND STATIC_AMOUNT < 1000000 THEN '500K - 1M'
    ELSE '> 1M'
END;

COMMIT;
SELECT 
    GOAL_range,
    SUM(SUCCESS_FLAG) AS successful_projects

FROM projects
GROUP BY GOAL_range;
select goal,state from projects
where state="Successful";
select * from projects;
SELECT count(*) FROM crowdfunding.projects;
use crowdfunding;

--  Total Number of Projects based on outcome 
SELECT STATE, COUNT(*) AS total_projects
FROM projects
GROUP BY STATE
order by 2 desc;

--      Total Number of Projects based on Locations
SELECT l.displayable_name, COUNT(*) AS total_projects
FROM projects p
JOIN crowdfunding_location l ON p.location_id = l.id
GROUP BY l.displayable_name ORDER BY TOTAL_PROJECTS DESC;
--     Total Number of Projects based on  Category
SELECT c.name, COUNT(*) AS total_projects
FROM projects p
JOIN category c ON p.category_id = c.id
GROUP BY 1 ORDER BY TOTAL_PROJECTS 
DESC;
-- Total Number of Projects created by Year , Quarter , Month
SELECT YEAR(from_unixtime(CREATED_AT)) AS year, quarter(from_unixtime(CREATED_AT)) AS QUARTER,MONTH(FROM_UNIXTIME(created_at)) AS month, COUNT(*) AS total_projects
FROM projects
GROUP BY YEAR(from_unixtime(CREATED_AT)),quarter(from_unixtime(CREATED_AT)), MONTH(FROM_UNIXTIME(created_at))
order by total_projects desc;
-- BY YEAR 
SELECT YEAR(from_unixtime(CREATED_AT)) AS year,  COUNT(*) AS total_projects
FROM projects
GROUP BY YEAR(from_unixtime(CREATED_AT));

-- SUCCcessful Projects
SELECT count(*) FROM PROJECTS WHERE STATE="SUCCESSFUL";
--  Amount Raised 
	-- STATIC_AMOUNT=GOAL *STATIC_USD_RATE

     SELECT FORMAT(SUM(STATIC_AMOUNT) / 1000000, 2) AS formatted_amount_in_millions
FROM PROJECTS; -- IN MILLIONS
-- COUNT OF BACKERS 
SELECT FORMAT(SUM(BACKERS_COUNT)/1000000,2) FROM PROJECTS;
-- AVG NO.OF DAYS WHERE PROJECT IS SUCCESFUL
SELECT AVG(datediff(FROM_UNIXTIME(SUCCESSFUL_aT),FROM_UNIXTIME(CREATED_AT))) AS AVG_DATEDIFF_ FROM PROJECTS WHERE STATE="SUCCESSFUL";

-- TOP 10 SUCCESSFUL PROJECTS BASED ON BACKERS COUNT
SELECT NAME,BACKERS_COUNT FROM PROJECTS WHERE STATE="SUCCESSFUL" ORDER BY BACKERS_COUNT DESC LIMIT 10 ;
-- TOP 10 SUCCESSFUL PROJECTS BASED ON AMOUNT RAISED
SELECT NAME,STATIC_AMOUNT FROM PROJECTS WHERE STATE="SUCCESSFUL" ORDER BY STATIC_AMOUNT DESC LIMIT 10;
-- CREATING SUCCESS_FLAG FOR PERCENTAGE CALCULATION
/* ALTER TABLE PROJECTS ADD COLUMN success_flag INT DEFAULT 0;
SET SQL_SAFE_UPDATES=0;
UPDATE PROJECTS SET SUCCESS_FLAG=CASE WHEN STATE="SUCCESSFUL"THEN 1 ELSE 0 END;
*/



--  Percentage of Successful Projects  by Category
SELECT CATEGORY.NAME,CONCAT(ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,0),"%") AS SUCCESS_PERCENT 
FROM PROJECTS JOIN CATEGORY ON PROJECTS.CATEGORY_ID=CATEGORY.id GROUP BY CATEGORY.NAME;

SELECT CATEGORY.category,CONCAT(ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,2),"%") AS SUCCESS_PERCENT 
FROM PROJECTS JOIN CATEGORY ON PROJECTS.CATEGORY_ID=CATEGORY.ï»¿id GROUP BY CATEGORY.CATEGORY ORDER BY ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,2)  DESC;

--  Percentage of Successful Projects  by YEAR
SELECT YEAR(FROM_UNIXTIME(created_at)) AS Year_, 
       CONCAT(ROUND(SUM(success_flag) / (SELECT COUNT(*) FROM PROJECTS )*100,2),"%") AS success_percentage
FROM PROJECTS 
GROUP BY YEAR_ ORDER BY ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,2)  DESC ;

 -- Percentage of Successful Projects  by GOALRANGE
SELECT CASE 
        WHEN STATIC_AMOUNT < 50000 THEN '< 50K'
        WHEN STATIC_AMOUNT >= 50000 AND STATIC_AMOUNT < 500000 THEN '50K - 500K'
        WHEN STATIC_AMOUNT >= 500000 AND STATIC_AMOUNT< 1000000 THEN '500K - 1M'
        ELSE '> 1M'
    END AS GoalRange,
CONCAT(ROUND(SUM(success_flag)/(SELECT COUNT(*) FROM PROJECTS )*100,2),"%") AS SUCCESS_PERCENT 
FROM PROJECTS  WHERE STATE="SUCCESSFUL" GROUP BY GOALRANGE ORDER BY ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,2) DESC ;


-- PERCENTAGE OF SUUCESSFUL PROJECTS BY LOCATION
SELECT crowdfunding_location.displayable_name,
       CONCAT(ROUND(SUM(success_flag) / (SELECT COUNT(*) FROM PROJECTS )*100,2),"%") AS success_percentage
FROM PROJECTS JOIN crowdfunding_location ON PROJECTS.LOCATION_ID=crowdfunding_location.id
GROUP BY crowdfunding_location.displayable_name  ORDER BY ROUND(SUM(success_flag)/
(SELECT COUNT(*) FROM PROJECTS WHERE STATE="SUCCESSFUL")*100,2)  DESC ;